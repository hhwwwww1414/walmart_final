# dashboard/app.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from collections import Counter
from wordcloud import WordCloud

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å seasonal_decompose
try:
    from statsmodels.tsa.seasonal import seasonal_decompose
    _has_statsmodels = True
except ImportError:
    _has_statsmodels = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Walmart Forecasting Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_sales():
    sales = pd.read_csv("../data/raw/train.csv", parse_dates=["Date"])
    feats = pd.read_csv("../data/raw/features.csv", parse_dates=["Date"])
    stores = pd.read_csv("../data/raw/stores.csv")
    df = (
        sales
        .merge(feats, on=["Store", "Date", "IsHoliday"], how="left")
        .merge(stores, on="Store", how="left")
    )
    return df

@st.cache_data
def load_reviews():
    try:
        df = pd.read_json("../data/reviews/train.jsonl", lines=True)
    except (FileNotFoundError, ValueError):
        return pd.DataFrame({"review_text": []})
    text_cols = [c for c in df.columns if df[c].dtype == object]
    if text_cols and "review_text" not in df.columns:
        df = df.rename(columns={text_cols[0]: "review_text"})
    df["review_text"] = df.get("review_text", "").astype(str)
    return df[["review_text"]]

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_sales()
reviews = load_reviews()

# Sidebar: —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ, –º–∞–≥–∞–∑–∏–Ω—É, –æ—Ç–¥–µ–ª—É
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
min_date, max_date = df["Date"].min().date(), df["Date"].max().date()
date_range = st.sidebar.date_input(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", (min_date, max_date),
    min_value=min_date, max_value=max_date
)
if isinstance(date_range, (list, tuple)) and len(date_range) == 2:
    start, end = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
    df = df[df["Date"].between(start, end)]

stores = ["–í—Å–µ"] + sorted(df["Store"].unique().tolist())
sel_store = st.sidebar.selectbox("–ú–∞–≥–∞–∑–∏–Ω", stores)
if sel_store != "–í—Å–µ":
    df = df[df["Store"] == sel_store]

depts = ["–í—Å–µ"] + sorted(df["Dept"].unique().tolist())
sel_dept = st.sidebar.selectbox("–û—Ç–¥–µ–ª", depts)
if sel_dept != "–í—Å–µ":
    df = df[df["Dept"] == sel_dept]

# –†–∞–∑–¥–µ–ª 1: —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–∞–∂
st.title("üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ Walmart (—Å—Ç–æ–ª–±—Ü—ã)")
if "Weekly_Sales" in df.columns:
    agg = df.groupby(["Date", "IsHoliday"])["Weekly_Sales"].sum().reset_index()
    fig1 = px.bar(
        agg, x="Date", y="Weekly_Sales", color="IsHoliday",
        barmode="stack",
        labels={"Weekly_Sales": "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", "IsHoliday": "–ü—Ä–∞–∑–¥–Ω–∏–∫"},
        title="–ü—Ä–æ–¥–∞–∂–∏ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –Ω–µ–¥–µ–ª—å"
    )
    fig1.update_layout(xaxis_title="–î–∞—Ç–∞", yaxis_title="Weekly Sales")
    st.plotly_chart(fig1, use_container_width=True)
else:
    st.warning("–ù–µ—Ç `Weekly_Sales` –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")

# –†–∞–∑–¥–µ–ª 2: —Å–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
st.subheader("üîç –°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å—É–º–º–∞—Ä–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
if _has_statsmodels and "Weekly_Sales" in df.columns:
    daily = df.groupby("Date")["Weekly_Sales"].sum().reset_index()
    if len(daily) >= 2*52:
        decomp = seasonal_decompose(
            daily.set_index("Date")["Weekly_Sales"],
            model="additive", period=52
        )
        comp = make_subplots(
            rows=4, cols=1, shared_xaxes=True,
            subplot_titles=["–ù–∞–±–ª—é–¥–µ–Ω–∏—è", "–¢—Ä–µ–Ω–¥", "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "–û—Å—Ç–∞—Ç–∫–∏"]
        )
        comp.add_trace(go.Scatter(x=daily["Date"], y=daily["Weekly_Sales"]), row=1, col=1)
        comp.add_trace(go.Scatter(x=daily["Date"], y=decomp.trend), row=2, col=1)
        comp.add_trace(go.Scatter(x=daily["Date"], y=decomp.seasonal), row=3, col=1)
        comp.add_trace(go.Scatter(x=daily["Date"], y=decomp.resid), row=4, col=1)
        comp.update_layout(height=800, showlegend=False)
        st.plotly_chart(comp, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.")
else:
    st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `statsmodels`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–µ–∑–æ–Ω–Ω—É—é –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é.")

# –†–∞–∑–¥–µ–ª 3: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
features = ["Weekly_Sales", "Size", "Temperature", "Fuel_Price", "CPI", "Unemployment"]
avail = [f for f in features if f in df.columns]
sel_corr = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", avail, default=avail)
if sel_corr:
    corr = df[sel_corr].corr()
    heat = px.imshow(
        corr, text_auto=".2f", aspect="auto",
        color_continuous_scale="RdBu", color_continuous_midpoint=0
    )
    heat.update_layout(height=500, margin=dict(t=50))
    st.plotly_chart(heat, use_container_width=True)
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫.")

# –†–∞–∑–¥–µ–ª 4: scatter-–ø–ª–æ—Ç—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—ä—ë–º–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
st.subheader("üîÄ Scatter: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
# 1. –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–ª—é–±–∞—è —á–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
target = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–æ—Å—å Y)",
    numeric_cols,
    index=numeric_cols.index("Weekly_Sales") if "Weekly_Sales" in numeric_cols else 0
)

# 2. –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Å–∏ X
scatter_feats = st.multiselect(
    "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ—Å–∏ X",
    [c for c in numeric_cols if c != target],
    default=[c for c in numeric_cols if c not in ("Store","Dept","IsHoliday","Date",target)][:3]
)

# 3. –û–±—ä—ë–º –≤—ã–±–æ—Ä–∫–∏
max_n = len(df)
options = [1000, 5000, 10000]
options = [o for o in options if o < max_n] + [max_n]
sample_n = st.select_slider(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏",
    options=options,
    value=min(5000, max_n)
)

if not scatter_feats:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è X.")
else:
    # –¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–≤—ã–±–æ—Ä–∫—É
    df_smp = df.sample(n=sample_n, random_state=42)
    # –≤—ã–≤–æ–¥–∏–º —Å–µ—Ç–∫—É –ø–æ 3 –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä—è–¥
    cols = 3
    for i in range(0, len(scatter_feats), cols):
        row_feats = scatter_feats[i:i+cols]
        cols_ui = st.columns(len(row_feats))
        for feat, col_ui in zip(row_feats, cols_ui):
            fig = px.scatter(
                df_smp,
                x=feat, y=target,
                color="IsHoliday" if "IsHoliday" in df_smp.columns else None,
                labels={feat: feat, target: target, "IsHoliday": "Holiday"},
                title=f"{feat} ‚Üî {target} (n={sample_n})"
            )
            fig.update_traces(marker=dict(size=5, opacity=0.5))
            fig.update_layout(height=300, margin=dict(t=40, b=20))
            col_ui.plotly_chart(fig, use_container_width=True)

# –†–∞–∑–¥–µ–ª 5: –≥–µ–æ–≥—Ä–∞—Ñ–∏—è
if {"Latitude", "Longitude"}.issubset(df.columns):
    st.subheader("üåé –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º")
    store_loc = (
        df.groupby("Store")[["Latitude","Longitude","Weekly_Sales"]]
        .agg({"Latitude":"first","Longitude":"first","Weekly_Sales":"sum"})
        .reset_index()
    )
    map_fig = px.scatter_mapbox(
        store_loc,
        lat="Latitude", lon="Longitude",
        size="Weekly_Sales", hover_name="Store",
        zoom=3, mapbox_style="carto-positron",
        title="–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º"
    )
    st.plotly_chart(map_fig, use_container_width=True)

# –†–∞–∑–¥–µ–ª 6: –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
st.title("üí¨ –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
if not reviews.empty:
    text = " ".join(reviews["review_text"])
    wc = WordCloud(width=800, height=300, background_color="white").generate(text)
    st.image(wc.to_array(), use_container_width=True)

    reviews["length"] = reviews["review_text"].str.len()
    hist = px.histogram(
        reviews, x="length", nbins=50,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–∑—ã–≤–æ–≤"
    )
    hist.update_layout(xaxis_title="–î–ª–∏–Ω–∞", yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞", height=400)
    st.plotly_chart(hist, use_container_width=True)
else:
    st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
